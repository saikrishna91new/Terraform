
data = var.getvalue
 string1 = ["custom_parameters",]


   string_to_search = <<EOT
        %{ for i in local.string1 }
        "${i}"
%{ endfor }
EOT
#read all nested keys into list
 plan_out3kk =  tolist(concat([for i in local.string1: keys(lookup(local.data, "${i}", "test")[0])]...))
# read all nested values into list
 plan_out3kv =  tolist(concat([for i in local.string1: values(lookup(local.data, "${i}", "test")[0])]...))
#creating a map from it
 zpmp = zipmap(local.plan_out3kk, local.plan_out3kv)

#creating a map with non nested list

plan_out4 = { for k,v  in local.data: k => v if !can(regex(k, local.string_to_search))}

#merging both the list
merge_op = merge(local.zpmp, local.plan_out4)

test_fine = { for k,v in local.merge_op: (k) => { "name" = k
                                                    "given_value" = v
                                                    "compilance" = can(regex(v, "null"))?"true":"false"
                                                    "cmpl2" = v != null ? can(regex(v, "premium"))?"true":"false" : "krishna"           } }













parm3 = { for i in local.f1.values:  (i.parameter) => {
                        gvalue = local.data["${split(".",i.parameter)[0]}"][0]["${split(".",i.parameter)[1]}"][0]["${split(".",i.parameter)[2]}"]
                        rvalue = i.value
} if length(split(".",i.parameter)) == 3
}

parm = { for i in local.f1.values:  (i.parameter) => {
                        gvalue = local.data["${split(".",i.parameter)[0]}"]
                        rvalue = i.value
} if length(split(".",i.parameter)) == 1
}


parm2 = { for i in local.f1.values:  (i.parameter) => {
                        gvalue = local.data["${split(".",i.parameter)[0]}"][0]["${split(".",i.parameter)[1]}"]
                        rvalue = i.value
} if length(split(".",i.parameter)) == 2
}

ouput = merge(local.parm3, local.parm, local.parm2)
#parm3 = local.data["queue_encryption_key_type"]

#result = [ for i in local.f1.values: [ for k , v in local.ouput : v.value ] if ]
#result = [ for k , v in local.ouput :{ k =  v.value
#                                       j = can(regex(v.value, "5")?"true":"false")     }
result = [ for k , v  in local.ouput :  {
                                gvalue = v.gvalue
                                rvalue = v.rvalue
                                cmp = can(regex(v.gvalue,v.rvalue))?"true":"failed"
                                }]


result2 = [ for i in local.result : { "test" = try(index(values(i), "failed"),"no")}]


